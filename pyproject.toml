[project]
name = "skaha"
version = "1.6.1"
requires-python = ">=3.9"
description = "Python Client for CANFAR Science Platform"
license = { file = "LICENSE" }
readme = "README.md"
keywords = ["skaha", "canfar", "python", "client", "container", "platform"]
authors =[
    {"name"="Shiny Brar", "email"="shiny.brar@nrc-cnrc.gc.ca"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "Intended Audience :: System Administrators",
    "Natural Language :: English",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Scientific/Engineering :: Astronomy",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
]
dependencies = [
    "authlib>=1.6.0",
    "defusedxml>=0.7.1",
    "httpx>=0.28.1",
    "pydantic>=2.9.2",
    "pydantic-settings>=2.9.1",
    "rich>=13.9.4",
    "segno>=1.6.6",
    "toml>=0.10.2",
    "typer>=0.16.0",
    "vos>=3.6.2",
]

[project.urls]
"homepage"="https://shinybrar.github.io/skaha/"
"repository"="https://github.com/shinybrar/skaha"
"documentation"="https://shinybrar.github.io/skaha/"
"changelog"="https://shinybrar.github.io/skaha/changelog/"
"issues"="https://github.com/shinybrar/skaha/issues"

[tool.uv]
dev-dependencies = [
    "black>=23",
    "mkdocs-git-revision-date-localized-plugin>=1.2.9",
    "mkdocs-material>=9.5.41",
    "mkdocstrings-python>=1",
    "mypy>=1.12.0",
    "pre-commit>=3",
    "pytest>=8.3.3",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "ruff>=0.6.9",
    "types-toml>=0.10.8.20240310",
    "types-defusedxml>=0.7.0.20240117",
    "pytest-order>=1.3.0",
    "mike>=2.1.3",
]

[tool.ruff]
# Exclude a variety of commonly ignored directories
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same line length as black
line-length = 90

# Assume Python 3.8
target-version = "py38"

[tool.ruff.lint]
# Enable all rules by default
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "W",   # pycodestyle warnings
    "C",   # flake8-comprehensions
    "N",   # pep8-naming
    "B",   # flake8-bugbear
    "I",   # isort
    "D",   # pydocstyle
    "UP",  # pyupgrade
    "ANN", # flake8-annotations
    "S",   # flake8-bandit
    "BLE", # flake8-blind-except
    "FBT", # flake8-boolean-trap
    "COM", # flake8-commas
    "DTZ", # flake8-datetimez
    "T20", # flake8-print
    "PT",  # flake8-pytest-style
    "RUF", # Ruff-specific rules
]

# Ignore specific rules
ignore = [
    "B904",  # Use 'raise from' instead of bare raise
    "B028",  # No explicit stacklevel in warnings
    "D100",  # Missing docstring in public module
    "D104",  # Missing docstring in public package
    "ANN401", # Dynamically typed expressions
    "FBT001", # Boolean-typed positional argument in function definition
    "FBT002", # Boolean default positional argument in function definition
]

# Allow autofix for all enabled rules
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.isort]
known-first-party = ["skaha"]
combine-as-imports = true
force-wrap-aliases = true
lines-after-imports = 2
default-section = "third-party"
section-order = ["future", "standard-library", "first-party", "local-folder", "third-party"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F403", "F405"]
"tests/*" = ["S101", "ANN", "D103", "S105", "S106"]

[tool.ruff.lint.mccabe]
max-complexity = 15

[tool.ruff.lint.pycodestyle]
max-doc-length = 88

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --cov=skaha"
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["skaha"]
omit = ["tests/*", "setup.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "pass",
    "@(abc\\.)?abstractmethod",
]
